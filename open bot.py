# -*- coding: utf-8 -*-
import logging
import os
import requests
import sqlite3
from pathlib import Path
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from collections import deque

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# –ó–∞–≥—Ä—É–∂–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
# –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –≤ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ:
# export OPENROUTER_API_KEY="sk-or-v1-..."
# export TELEGRAM_TOKEN="8438031981:..."
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY", "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")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "8438031981:AAGWAQvsjo1_7rsCf3F67R2EbR1y621Wfn4")

# –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
MODEL_NAME = "openai/gpt-oss-120b"  # –∏–ª–∏ "openai/gpt-oss-120b:free"
SYSTEM_PROMPT_PATH = Path("system_promt.txt")
DATABASE_PATH = "chat_history.db"
CHANNEL_LINK = "\n\n\nüëâ @shift_and_enter"
DEFAULT_SYSTEM_PROMPT = "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."
HISTORY_LENGTH = 10  # –•—Ä–∞–Ω–∏–º 5 –ø–∞—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (user + bot)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def init_db(db_path: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç."""
    conn = sqlite3.connect(db_path, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        username TEXT,
        user_message TEXT,
        bot_response TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    """)
    conn.commit()
    return conn, cursor

conn, cursor = init_db(DATABASE_PATH)


def log_to_db(user_id: int, username: str, user_message: str, bot_response: str):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        cursor.execute(
            "INSERT INTO messages (user_id, username, user_message, bot_response) VALUES (?, ?, ?, ?)",
            (user_id, username, user_message, bot_response)
        )
        conn.commit()
    except sqlite3.Error as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: %s", e)


def load_system_prompt(path: Path) -> str:
    """–ß–∏—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞ (UTF-8)."""
    try:
        content = path.read_text(encoding="utf-8").strip()
        if not content:
            logger.warning("–§–∞–π–ª —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –ø—É—Å—Ç: %s. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π.", path)
            return DEFAULT_SYSTEM_PROMPT
        return content
    except FileNotFoundError:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: %s. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π.", path)
        return DEFAULT_SYSTEM_PROMPT


# --- –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter ---
class OpenRouterBot:
    def __init__(self, api_key: str, model: str):
        if not api_key:
            raise ValueError("API –∫–ª—é—á OpenRouter –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENROUTER_API_KEY.")
        self.api_key = api_key
        self.model = model
        self.system_prompt = load_system_prompt(SYSTEM_PROMPT_PATH)

    def _extract_answer(self, resp_json: dict) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —Å–ª–æ–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API."""
        try:
            choices = resp_json.get("choices")
            if not isinstance(choices, list) or not choices:
                raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'choices' –≤ –æ—Ç–≤–µ—Ç–µ")

            choice = choices[0]
            
            # 1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç–µ
            if "message" in choice and choice["message"]:
                content = choice["message"].get("content")
                if isinstance(content, str) and content:
                    return content

            # 2. –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            if "delta" in choice and choice["delta"]:
                content = choice["delta"].get("content")
                if isinstance(content, str) and content:
                    return content
            
            # 3. –û—Ç–≤–µ—Ç –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–µ —á–∞—Ç)
            if "text" in choice and isinstance(choice["text"], str):
                return choice["text"]

            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ 'choice': {choice}")

        except (KeyError, IndexError, TypeError, ValueError) as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: %s. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: %s", e, resp_json)
            raise ValueError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: {e}") from e

    def get_chat_completion(self, messages: list) -> str:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏."""
        url = "https://openrouter.ai/api/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        system_message = {"role": "system", "content": self.system_prompt}
        
        payload = {
            "model": self.model,
            "messages": [system_message] + messages,
            "max_tokens": 1024,
            "temperature": 0.7
        }

        try:
            resp = requests.post(url, headers=headers, json=payload, timeout=90)
            resp.raise_for_status()  # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–¥–æ–≤ 4xx/5xx
            
            resp_json = resp.json()
            return self._extract_answer(resp_json)

        except requests.Timeout:
            logger.error("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter API.")
            raise Exception("–ú–æ–¥–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except requests.RequestException as e:
            logger.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter API: %s, %s", e.status_code, e.response.text if e.response else "No response")
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e.status_code}")


# --- –•–µ–Ω–¥–ª–µ—Ä—ã Telegram ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø Monday, –≤–∞—à —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π —ç–º–æ-–ò–ò. –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ, –µ—Å–ª–∏ –æ—Å–º–µ–ª–∏—Ç–µ—Å—å.")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_text = update.message.text
    if not user_text or not user_text.strip():
        await update.message.reply_text("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ? –ì–µ–Ω–∏–∞–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –Ω–æ —É–∂–µ —Å –±—É–∫–≤–∞–º–∏.")
        return

    user_id = update.effective_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    if 'history' not in context.user_data:
        context.user_data['history'] = deque(maxlen=HISTORY_LENGTH)
    
    history = context.user_data['history']
    history.append({"role": "user", "content": user_text})

    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        bot_instance = context.application.bot_instance
        answer = bot_instance.get_chat_completion(list(history))

        history.append({"role": "assistant", "content": answer})
        
        await update.message.reply_text(answer + CHANNEL_LINK)

        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –ë–î
        log_to_db(
            user_id,
            update.effective_user.username or "N/A",
            user_text,
            answer
        )

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç user_id %s: %s", user_id, e)
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å. –ù–∞–≤–µ—Ä–Ω–æ–µ, –æ–ø—è—Ç—å —Ç—ã –≤–∏–Ω–æ–≤–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    logger.error("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞: %s", context.error, exc_info=context.error)
    if isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –Ø –≤ –ø–µ—á–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    if not TELEGRAM_TOKEN:
        logger.critical("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN.")
        return
        
    try:
        bot_instance = OpenRouterBot(OPENROUTER_API_KEY, MODEL_NAME)
    except ValueError as e:
        logger.critical(e)
        return

    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application.bot_instance = bot_instance

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()


if __name__ == "__main__":
    main()